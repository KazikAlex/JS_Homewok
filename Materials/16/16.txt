ОБРАБОТКА ИСКЛЮЧЕНИЙ
  - A.78 (первые 2 стр. + finally)
  - Порождать ошибку можно также через throw new Error('Something went wrong')

  Практическое задание:
    Создать GET-запрос по адресу https://reqres.in/api/users?page=2. Проверить, получаются ли данные с сервера.
    Описать свой блок try/catch в обработчике успешного запроса. В try попытаться распарсить JSON-ответ с сервера.
    Если исключения не возникает - породить его самостоятельно (попробовать 2 способа порождения).
    Если возникает исключение (строка некорректная) - в блоке catch вывести в консоль информацию об ошибке.
    Протестировать оба варианта. Убедиться, что код после блока try/catch продолжает выполняться.

ОПТИМИЗАЦИЯ СКОРОСТИ ЗАГРУЗКИ СТРАНИЦЫ
  - См. скрины

ИНФОРМАЦИЯ ПРО ИТОГОВЫЙ ПРОЕКТ
  Общие критерии - 13.5:
    - Адекватная файловая структура - 0.5
    - Скрипты и библиотеки подключаются правильно, есть тег мобильной поддержки - 0.5
    - Красота кода - 2:
      - Аккуратные отступы и одинаковые кавычки - 0.5
      - Используется 1 вид синтаксиса JS - 0.5
      - Отсутствует неиспользуемый код и дебаггеры - 0.5
      - Адекватные имена переменных и функций - 0.5
    - Обработка потенциальных ошибок (используя try/catch) - 0.5
    - Оптимизация кода (неизобретение велосипедов) - 2

    - Отсутствуют баги и ошибки в консоли - 1.5
    - Корректная работа навигации и перезагрузки страницы - 1.5
    - Адаптивность и использование препроцессоров - 1.5
    - Логическая завершенность проекта - 1.5
    - Сложность проекта - 2

  Технологии - 6.5:
    - Модульность и ООП - 1
    - Ajax и NodeJS - 1.5
    - Сборщик проекта WebPack - 1
    - Темплейты - 1
    - Самостоятельно изученные технологии - напр. анимации, диаграммы, графика, drag'n'drop, работа с мультимедиа,
      возможности Node.js - напр. отправка файлов на сервер, отправка писем или регистрация, лоадеры WebPack для шрифтов
      или изображений, тесты, подключение базы данных, фишки из ES7-8 и т.д. - 2

  За основательный копипаст моего приложения-примера оценка за проект снижается на 1 балл.

  Примеры выпускных проектов:
    - http://fe.it-academy.by/Projects/Projects_JSE.html
    - Проекты моих студентов
    - Идеи проектов - тест, to-do list, счетчик каллорий, конвертер валют, учет доходов и расходов, кроссворд,
      интернет-магазин, конструктор сайта, приложение для тренировок, алкогольный калькулятор, медицинский калькулятор,
      виртуальный гардероб, игрушки

ДОПОЛНИТЕЛЬНАЯ ИНФОРМАЦИЯ *
  - AJAX - https://learn.javascript.ru/ajax-xmlhttprequest
  - Методы кодировки - escape(), encode-/decodeURI(), encode-/decodeURIComponent() - http://s3blog.org/escape-encodeuri-encodeuricomponent.html
  - Пути к файлам - http://www.uamedwed.com/blog/web/absolyutnyj-i-otnositelnyj-put-k-fajlam.html
  - Список кодов состояния - https://ru.wikipedia.org/wiki/%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA_%D0%BA%D0%BE%D0%B4%D0%BE%D0%B2_%D1%81%D0%BE%D1%81%D1%82%D0%BE%D1%8F%D0%BD%D0%B8%D1%8F_HTTP
  - Слайд F.90 - Кроссбраузерность — полифилл, фолбек, изящный отказ, постепенное улучшение

ДОМАШНЕЕ ЗАДАНИЕ
  Задание 1:
    Добавить на страницу кнопку "Загрузить список пользователей".
    По клику на нее осуществляется AJAX (GET) запрос на https://reqres.in (List Users).
    В случае успешного получения данных:
      - ДИНАМИЧЕСКИ добавить на страницу вкладки "Пользователь 1", "Пользователь 2" и т.д.
      (в соотв. с количеством пользователей)
      - сделать первую вкладку активной и показать под ней блок с информацией о пользователе (см. скрин)
      - вкладки должны иметь возможность переключаться и отображать соответствующие данные
      - полученные данные должны записываться в LocalStorage *
      - при загрузке страницы должна происходить проверка, если данные есть в LocalStorage, не отправлять AJAX запрос, а
        сразу отрисовывать их *
    В случае ошибки получения данных (протестировать можно, изменив url запроса как в примере с урока):
      - отрисовать на странице сообщение о том, что данные не получены, в произвольном виде
    Перед отправкой ОБЯЗАТЕЛЬНО (!!!) порефакторить код и протестировать на работоспособность и максимально на
    отсутствие багов ваше приложение.