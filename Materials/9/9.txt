ФУНКЦИОНАЛЬНЫЙ СТИЛЬ ООП
  Публичные и приватные свойства и методы, сохранение контекста:
    - https://learn.javascript.ru/internal-external-interface

    Практическое задание 2:
      Добавить в класс Cat приватное свойство foodAmount, равное 50, и приватный метод formatFoodAmount, который
      будет возвращать это свойство + слово 'гр.'. В методе feed необходимо выводить в консоль информацию вида:
        "Насыпаем в миску (количество гр.) корма."
      "Количество гр." получаем с помощью метода formatFoodAmount.
      Вывести в консоль результат выполнения метода feed.

  Геттеры и сеттеры:
    - https://learn.javascript.ru/getters-setters

    Практическое задание 3:
      Написать единый геттер-сеттер dailyNorm для установки/получения количества корма (foodAmount).
      Оно не должно быть меньше 50 и больше 500 грамм. В случае некорректного количества возвращать сообщение об ошибке.
      Если функция вызывается как геттер - она должна возвращать уже отформатированное значение foodAmount.
      Протестировать метод dailyNorm с разными значениями параметра и без него. Метод feed должен оперировать актуальной
      информацией (использовать внутри метода вызов геттера).

  Функциональное наследование, расширение метода родителя:
    - https://learn.javascript.ru/functional-inheritance

    Защищенные свойства и методы:
      - Их имя начинается с _ . Технически они являются публичными, поскольку записаны в this. Но относиться к ним стоит
        как к приватным (а именно - использовать только в самом коде класса или классов наследников, не вызывать
        напрямую из объекта класса, не изменять снаружи класса).
      - Приватные свойства и методы следует переносить в защищенные только если к ним требуется доступ из дочерних классов.

    Практическое задание 4:
      Создать класс Animal. Перенести в него все свойства и методы. Отнаследоваться внутри Cat от Animal.
      Расширить метод feed для кошек. Теперь он должен выводить в консоль информацию вида:
        "Насыпаем в миску (количество гр.) корма.
        Кот доволен ^_^"
      Использовать вызов родительского метода вида animalFeed() и сохранение контекста this через переменную.
      Все вызовы, которые работали ранее, должны по-прежнему работать корректно.

  Chaining:
    - Это способ упрощения кода в случае вызова нескольких методов, применяемых к одному и тому же объекту.
      Иначе говоря это "цепочка методов".
    - Слайды B.60d-e - Реализация

    Практическое задание 5:
      Добавить публичный метод stroke, который будет выводить в консоль информацию "Гладим кота.".
      Доделать метод feed таким образом, чтобы можно было цепочкой вызывать его и метод stroke в любой
      последовательности и сколько угодно раз.
      (Лишние логи можно убрать, делать всё в том же задании).