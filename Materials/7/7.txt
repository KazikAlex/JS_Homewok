КОНТЕКСТ И ЕГО УСТАНОВКА
  Контекст this:
    - http://web.archive.org/web/20190405104502/http://learn.javascript.ru/object-methods (до главы "Ссылочный тип")
  Методы для установки контекста:
    - Метод bind - см. скрины
    - Методы call/apply - см. скрины
  Разница между bind и call/apply:
    Bind - только устанавливает контекст и передает параметры, но не вызывает функцию к работе
    Call - устанавливает контекст, передает параметры раздельно и вызывает функцию
    Apply - устанавливает контекст, передает параметры в виде массива и вызывает функцию, в функции параметры
    принимаются по-прежнему как раздельные
  Чем будет являться this в конкретном случае:
    - См. скрин

КЛАСС И ОБЪЕКТ КЛАССА
  - Понятие класса и объекта класса, свойства и методы

  Описание собственного класса и объекта класса:
    - См. скрин
    - Функция-конструктор - фабрика по производству объектов, иначе говоря шаблон
    - Что запишется в объект
    - В this записывается текущий объект класса
    - Фиксированные свойства "хардкодятся", динамические чаще всего получают из параметров функции-конструктора
    - Удаление объектов класса - нет прямого способа, присваивается null
    - Слайд B.60c - последовательность действий

  Сравнение простого объекта и объекта класса:
    - См. скрины

  Практическое задание 1:
    Создать класс Cat. Добавить ему свойство - name, которое будем получать при создании объекта класса, и пока пустой
    метод feed. Создать объект класса Cat, вывести в консоль его имя и затем удалить объект.
    (Разобрать правила форматирования).

ПРИНЦИПЫ ООП
  Инкапсуляция:
    Это процесс сокрытия части реализации интерфейса от пользователя.
    Например, мы не знаем, как устроен чайник изнутри, но тем не менее имеем простой интерфейс для работы с ним.
  Наследование (нарисовать схему):
    Это возможность наследовать свойства и методы других классов.
    Например, у всех объектов класса "Животные" (супер-класс) есть свойство "количество лап" и метод "покормить животное".
    Класс "Кошки", в свою очередь, может отнаследовать данные свойство и метод, т.к. они присущи и кошкам (при
    наследовании также можно расширять и дополнять метод родителя).
    В то же время у объектов класса "Кошки" могут быть и свои специфичные свойства и методы, например "длина шерсти" и
    "погладить животное".
  Полиморфизм (нарисовать схему):
    Это многообразие форм объекта, передаваемого в метод.
    Например, мы можем вызвать метод "покормить животное". В зависимости от того, какое животное мы туда передадим -
    способ кормления и корм может быть разным, но процесс кормления пройдет успешно, т.к. любое животное, отнаследованное
    от класса "Животные" можно кормить (у любого животного будет такой метод).
  "Утиная" типизация (нарисовать схему):
    Если мы передадим в метод "покормить животное" простой объект "Ребенок" -
    процесс кормления также пройдет успешно, поскольку к любому ребенку также можно применить такой метод, даже несмотря
    на то, что ребенок - это не животное. Принцип "утиной" типизации звучит примерно так - "если это выглядит как утка,
    ходит как утка и крякает как утка - значит для нас это утка, и неважно что это на самом деле".