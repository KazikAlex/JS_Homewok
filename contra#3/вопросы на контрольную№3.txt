вопросы начинающиеся с 12-й лекции.

1) Что такое Window? Из чего он состоит?
   это глобальный объект для JavaScript-кода,также он представляет собой окно браузера и располагает методами для управления им. Он состоит из DOM (Document Object Model), BOM (Browser Object Model)(navigator, screen, location, frames, history, XMLHttpRequest) и JavaScript (Object, Array, Function).

https://learn.javascript.ru/browser-environment


2) Что такое BOM? Назовите 2-3 его возможности.
   (Browser Object Model)(navigator, screen, location, frames, history, XMLHttpRequest)
   navigator.userAgent - инфа о браузере
   navigator.platform - инфа о платформе, т.е. ОС
   location.href - инфа о текущем УРЛЕ
   Функции alert/confirm/prompt тоже являются частью BOM

3) Что такое DOM-дерево? DOM-объект?
   это древовидная структура HTML-тегов (объектов), они могут быть вложеными друг в друга (дети), таким образом образовывваются дерево. Вложеный текст также является объектом (текстовым блоком). Пробелы и переводы строк также становятся текстовыми узлами.


4) Какие виды узлов бывают в DOM?
   элемменты (это по сути теги)
   текстовые узлы
   узлы комментарии
   <!DOCTYPE...> тоже является DOM-узлом и объект document формально также
   всего их 12 типов, но по сути мы используем только 4:
   1) document - «входная точка» в DOM.
   2) узлы-элементы – HTML-теги, основные строительные блоки.
   3) текстовые узлы – содержат текст.
   4) комментарии – иногда в них можно включить информацию, которая не будет показана, но доступна в DOM для чтения JS.


5) В чем особенности метода document.getElementById() ?
   Получает элемент на странице по его ID, работает быстро, т.к. ищет единственный на странице идентефикатор, который должен быть на каждой странице уникальным.


6) Что возвращает метод document.getElementsByTagName() ?
  возвращает HTML-collection (псевдо-массив) из всех тегов указанных как аргумент в методе


7) Что такое коллекция? В чем ее особенности?
   HTML-коллекции (псевдо-массивы). Не являются массивами. У них есть свойство length, можно обращаться к их элементам через arr[i], однако, у них нет методов, присущих объектам класса Array (например push(), pop(), forEach(), map() и т.д.)


8) Почему лучше использовать команды document.getElement(s)By* чем document.querySelector() ?
   Содержимое псевдо-массивов, возвращаемых методами document.getElement(s)By*, живое — если дерево DOM изменяется (напр. удаляются или добавляются элементы), при следующем обращении к псевдо-массиву его содержимое автоматически обновляется.

9) Чем отличаются свойства el.parentNode и el.offsetParent?
   el.parentNode - Возвращает ссылку на родительский узел (может быть текстовым);
   el.offsetParent - Возвращает ссылку на ближайшего позиционированного предка (у которого position не равен static), а если такого нет - на body

10) Чем отличаются свойства el.childNodes и el.children?
    el.childNodes - Возвращает коллекцию из всех дочерних узлов (в т.ч. текстовых)
    el.children - Возвращает коллекцию из всех дочерних узлов-тегов (чисто теги)


11) Как задать HTML-содержимое элементу? Что будет если использовать эту команду с += ?
    el.innerHTML = '<span>Привет</span>';
    если использовать += то добавим в конец содержимого данного элемента дополнительное содержимое


12) Как работает метод el.insertAdjacentHTML() ?
    Метод вставляет текст как HTML, в указанную позицию. Значения позиций указываются первым параметром:
    el.insertAdjacentHTML("afterend", "<p>My new paragraph</p>");
    Значения: 
     "afterbegin"
     "afterend"
     "beforebegin"
     "beforeend"

13) Что такое data-атрибуты и зачем они нужны?
    Это атрибуты с помощью которых можно привязать элементу данный, которые будут доступны в JavaScript. Как правило они начинаются с data- (пример data-about="Elephant") и потом их можно получиить через elem.dataset.about. Если название будет через тире (user-location), то при получение будет через CamelCase userLocation.

14) Как работает метод el.classList.toggle() ?
    Это фактически переключатель. Если класс у элемента есть, метод classList.toggle ведёт себя как classList.remove и класс у элемента убирает. А если указанного класса у элемента нет, то classList.toggle, как и classList.add, добавляет элементу этот класс.


15) Что такое DOM-свойства?
    Для элемента можно устанавливать (но не читать) любые стилевые свойства CSS через свойство style:
    элемент.style.имя_стилевого_свойства=значение
    Для элемента можно устанавливать сразу несколько стилевых свойств:  элемент.style.cssText=любой_код_CSS
    что аналогично установке атрибута style элемента: элемент.setAttribute('style',любой_код_CSS)
    элемент.className=класс
    Можно получить полный перечень всех фактически применённых к элементу (любым способом) window.getComputedStyle(elem)


16) Какие группы событий вы знаете? Перечислите 3 группы.
    1) взаимодействии мыши со страницей ( взаимодействии мыши с перетаскиваемыми (drag&drop))
    2) взаимодействии пальца со страницей
    3) взаимодействии клавиатуры со страницей

    4) форм и взаимодействии пользователя с элементами, которые могут получать фокус ввода (элементы форм, ссылки)
    5) Некоторые другие виды событий: DOMContentLoaded, blur, focus

    ИЛИ 
    1) События мыши: click, mouseover, mousedown
    2) События на элементах управления: submit, focus
    3) Клавиатурные события: keydown и keyup
    4) События документа: DOMContentLoaded
    5) CSS events: transitionend



17) Какие способы установки обработчика события вы знаете?
      1) Атрибут HTML: onclick="...".
      2) Через DOM-свойство elem.onclick = function, т.е. on-события (элемент.onсобытие=функция)ю Возможно использование атрибута HTML:  onclick="alert('Клик!')"
         Можно сздать функцию в JS и присвоить ее название в onclick
         Установленный таким образом обработчик можно отменить: элемент.onсобытие=null
      3) addEventListener (элемент.addEventListener(событие,функция,режим))
         Установленный таким способом перехватчик либо обработчик можно отменить: элемент.removeEventListener(событие,функция,режим)


18) Подробно опишите, как работает метод el.addEventListener() ?
      Метод addEventListener позволяет добавлять несколько обработчиков на одно событие одного элемента.
      Когда для элемента произойдёт событие, будет вызвана функция.
      Синтаксис: element.addEventListener(event, handler[, options]);
      Если режим равен true, будет установлен перехватчик, если false (или если не указан) — обработчик.
      При выполнении обработчика или перехватчика (т.е. функции) ему будет доступна переменная this, которая указывает на элемент, которому был установлен обработчик или перехватчик
      element.addEventListener(event, handler[, options]);
         event: Имя события, например "click".
         handler: Ссылка на функцию-обработчик.
         options: Дополнительный объект со свойствами

19) В чем разница между способами установки обработчиков событий через el.addEventListener() и el.on*() ?
      Разница в том, что через ON можно установить толтко один оббработчик на данный элемент (следующий ON перезапишет предыдущий),
      а на el.addEventListener() можно поставить сколь угоно много обработчиков и использовать типы событий, кторые работают только с ним. 
      Также addEventListener поддерживает объекты в качестве обработчиков событий.


20) Как удалить обработчик события, установленный через addEventListener() ?
      elem.removeEventListener("click", таже функция, что и установка события); и обязательно ф-ю обработчик сохранить где то, иначе мы не сможем ее удалить


21) Как удалить обработчик события, установленный через on* ?
      элемент.onсобытие=null

22) Чем отличается обработчик от перехватчика?
      Событию можно назначить обработчик, то есть функцию, которая сработает, как только событие произошло.
      Именно благодаря обработчикам JavaScript-код может реагировать на действия пользователя. Перехватчиком чаще всего выступают условия при которых всплытие не 
      продолжается далее такие каак event


23) Что такое объект event, для чего он нужен?
      Это объект события. Когда происходит событие, браузер создаёт объект события, записывает в него детали и передаёт его в качестве аргумента функции-обработчику.
      Объект события содержит ценную информацию о деталях события. Он передаётся первым аргументом event в обработчик для всех браузеров, кроме IE8-, в которых 
      используется глобальная переменная window.event.
      Через этот объект мы можем достучаться до свойств события, у него есть такие методы как event.type, event.currentTarget, event.target, event.clientX / event.clientY

24) Как вы понимаете термин "всплытие" события?
      При наступлении события обработчики сначала срабатывают на самом вложенном элементе, затем на его родителе, затем выше и так далее, вверх по цепочке вложенности.       
      Т.е. если обрабтчик назначен на все уровни вложенности, о сработают вссе обработчики на всех уровнях вложенности, вне зависимости от того, где произошло событие клика.
      Для остановки всплытия нужно вызвать метод event.stopPropagation().


25) Чем отличается свойство event.target от event.currentTarget?
      event.target – самый глубокий элемент, на котором произошло событие.
      event.currentTarget (=this) – элемент, на котором в данный момент сработал обработчик (до которого «доплыло» событие). ссылка на DOM-объект, до которого дошло всплытие
      event.preventDefault() под вопросом


26) Какие методы предотвращения всплытия вам известны?
      event.stopPropagation() - препятствует продвижению события дальше, но на текущем элементе все обработчики отработают.
      event.stopImmediatePropagation() - Для того, чтобы полностью остановить обработку. Он не только предотвращает всплытие, но и останавливает обработку событий на текущем элементе.

27) Как работает метод event.stopPropagation() ?
      препятствует продвижению события дальше, но на текущем элементе все обработчики отработают.

28) Как работает метод event.stopImmediatePropagation() ?
      Если у элемента есть несколько обработчиков на одно событие, то даже при прекращении всплытия все они будут выполнены.
      То есть, stopPropagation препятствует продвижению события дальше, но на текущем элементе все обработчики отработают.
      Для того, чтобы полностью остановить обработку. Он не только предотвращает всплытие, но и останавливает обработку событий на текущем элементе.

29) Для чего предназначен метод event.preventDefault() ?
      Для предотвращения соытий созданный в браузере по умолчанию, например при клике на submit или по ссылке
      отменяет действие события, заданное браузером по-умолчанию


30) Что такое делегирование событий, для чего используется и как оно реализуется?
      Идея в том, что если у нас есть много элементов, события на которых нужно обрабатывать похожим образом, то вместо того, чтобы назначать 
      обработчик каждому, мы ставим один обработчик на их общего предка. Из него можно получить целевой элемент event.target, понять на каком 
      именно потомке произошло событие и обработать его.

31) Есть таблица с тысячей строк. По клику на каждую строку я хочу окрасить ее в красный. Как это грамотно реализовать?
      сначала нужно создать класс для окраски ячейки напрмер .red {background-color: red;}, потом по event.target определить саму ячейку и присвоить ей classList = 'red';

32) Чему равен this в обработчике события?
      Он равен самому элементу по которому сделан обработчик
      this (=event.currentTarget) всегда будет сама форма, так как обработчик сработал на ней.

33) Что такое JSON? В чем его польза?
      JSON (JavaScript object notation) — популярный формат представления сложноструктурированных данных, позволяющий в виде строки представить 
      скалярное значение, значение массива либо хэша (объекта). Польза его в том, что сейчас все ссервера обммениваются данными в ссжатом JSON-формате, 
      это унифицированный язык общения между серверамми.


34) Какие методы для работы с JSON-форматом вы знаете?
      JSON.stringify(выражение,функция,пробелы)
      JSON.parse(строка,функция)


35) Что такое LocalStorage? В чем его польза? Как долго в нем хранятся данные?
      Локальное хранилище данных позволяет сохранять в веб-браузере пары ключ=значение. Сохранённые данные не теряются при перезагрузке страницы, 
      закрытии браузера или выключении компьютера.
      Данные сохраняются в привязке к «происхождению» (англ. «origin», протокол+домен+порт) текущего сайта, т.е. если одна страница какого-либо 
      сайта сохранила данные, любая другая страница этого же сайта (открытая на этом же компьютере в этом же браузере) сможет эти данные прочитать, 
      но никакая страница другого сайта (происхождения) не имеет доступа к этим данным.
      Суммарный объём данных, которые можно сохранить — 2-10 мегабайт каждому сайту, в зависимости от браузера.
      Сохраняемые значения — всегда строковые; если необходим другой тип значения, следует пользоваться преобразованиями типов.


36) В чем отличие LocalStorage от SessionStorage?
      Аналогично локальному хранилищу, существует сессионное хранилище — sessionStorage — данные в котором уничтожаются при закрытии вкладки браузера 
      (но сохраняются при перезагрузке страницы в той же вкладке или при навигации по сайту в той же вкладке).
      Оно не разделяется разными вкладками браузера — даже если одну и ту же страницу открыть несколько раз в разных вкладках браузера, каждая страница
      получит своё сессионное хранилище.

37) Что происходит после того, как пользователь ввел в адресную строку путь сайта и нажал Enter?
      Происходит DNS-запрос на ближайший сервер, который умеет преоразовывать URL в физичесский адрес, т.е. IP-адрес (методом GET). Потом идет соединение по данному IP,
      потом идет отправка данных на сервер, потом ожидание твета сервера, потом получене данных от сервера.

38) Как удалось ускорить общение между клиентом и сервером? С помощью каких двух технологий и как они работают?
      1) режим постоянного сединения Keep-Alive - использование одного TCP-соединения для отправки и получения многократных HTTP-запросов и ответов 
      вместо открытия нового соединения для каждой пары запрос-ответ.
      2) создание нескольких лифтов, т.е. нескольких Http-соединений (8-16 соединений). Также внедрили HTTP-конвейер, брайзер может послать несколкько GET-запросов 
      не дожидаясь ответа сервера, сервер последовательно их обрабатывает. И все эти лифты работают по принципу конвейера.

39) Что такое AJAX?
      AJAX (аббревиатура от «Asynchronous Javascript And Xml») – технология обращения к серверу без перезагрузки страницы. Под AJAX подразумевают любое общение 
      с сервером без перезагрузки страницы, организованное при помощи JavaScript.

40) Подробно опишите работу метода xhr.open() .
      xhr.open(method, URL, async, user, password) 
      Этот метод – как правило, вызывается первым после создания объекта XMLHttpRequest.
      Задаёт основные параметры запроса:
         - method – HTTP-метод. Как правило, используется GET либо POST, хотя доступны и более экзотические, вроде TRACE/DELETE/PUT и т.п.
         - URL – адрес запроса. Можно использовать не только http/https, но и другие протоколы, например ftp:// и file://.
         При этом есть ограничения безопасности, называемые «Same Origin Policy»: запрос со страницы можно отправлять только на тот же 
         протокол://домен:порт, с которого она пришла. В следующих главах мы рассмотрим, как их можно обойти.
         - async – если установлено в false, то запрос производится синхронно, если true – асинхронно.
         - user, password – логин и пароль для HTTP-авторизации, если нужны.

41) Что такое cookie?
      небольшой фрагмент данных, отправленный веб-сервером и хранимый на компьютере пользователя. Веб-клиент (обычно веб-браузер) всякий раз 
      при попытке открыть страницу соответствующего сайта пересылает этот фрагмент данных веб-серверу в составе HTTP-запроса. 
      Применяется для сохранения данных на стороне пользователя, на практике обычно используется для:
         - аутентификации пользователя;
         - хранения персональных предпочтений и настроек пользователя;
         - отслеживания состояния сеанса доступа пользователя;
         - сведения статистики о пользователях.



42) В чем разница между GET и POST запросами?
      Основное различие методов GET и POST состоит в способе передачи данных веб-формы обрабатывающему скрипту, а именно:
      Метод GET отправляет скрипту всю собранную информацию формы как часть URL. Ограничен объем передачи, плохая безопасность, можно сохранить уникальный адрес запроса,
      Метод POST передает данные таким образом, что пользователь сайта уже не видит передаваемые скрипту данные. Позволяет передавать файлы

43) Как или в каком виде мы можем отправлять данные на сервер?
      Данные на сервер мы передаем чаще всего в 
      1) JSON-формате.
      2) XML
      3) HTML/текст
      4) Бинарные данные, файлы - редко


44) Какой запрос будет считаться кросс-доменным?

45) Подробно опишите, что произойдет, если в блоке try возникает исключение?
      - оставшиеся операторы блока try не будут выполнены;
      - будут выполнены операторы из блока catch;
      - стандартной реакции браузера на возникновение исключения (окно с ошибкой, вывод ошибки в консоль...) не будет, т.к. исключение считается обработанным, т.к. оно «словлено» блоком catch;
      После выполнения всех операторов в блоке try (если исключение не возникло) или после выполнения всех операторов в блоке catch (если исключение возникало) управление будет передано операторам, идущим после try...catch.
      Переменная в блоке catch при возникновении исключения получит объект с информацией об исключении, содержащий свойства name (тип исключения) и message (текст исключения).


46) Как породить исключение в блоке try/catch самостоятельно?
      Исключение можно породить («бросить») самостоятельно, если исключительная ситуация обнаружена программным способом, или если механизм обработки исключений используется для других целей.
      throw выражение
      При выполнении оператора throw возникнет исключение, и переменной в блоке catch будет присвоено значение выражения.
      Для унификации кода в блоке catch, работающего и с встроенными исключениями и с порождёнными вручную, имеет смысл в операторе throw в качестве выражения передавать хэш, 
      содержащий свойства name и message.
      throw { name:'MyError', message:'что-то пошло не так!' };

47) Какие способы оптимизации скорости загрузки страницы вам известны?
      -уменьшение кличества HTTP-запросов
      -CSS в начале сттраницы
      -JS в конец страницы
      -минмизация JS, CSS, картинок (оптимизация фрмата изображений и сжатие их)
      -CDN для популярных библиотеки
      -не масштаировать изображения, а изменять исходные картинки.


48) Что такое CDN?
      Это сеть доставки контента, которая помогает увеличить скорость загрузки файлов на страницах сайта с помощью нескольких серверов, расположенных удаленно друг от друга, т.е.
      географически располагаются таким образом, чтобы сделать время ответа для пользователей сайта/сервиса минимальным. 
      CDN работает как связующее звено: объединяет все сервера в одну сеть и обеспечивает более быструю прогрузку контента.
      

49) Что такое полифилл?
      Термин «полифил» означает, что скрипт «заполняет» пробелы и добавляет современные функции. Таким образом, чтобы современные функции поддерживались в старых движках, 
      нам надо установить транспилер (Babel- Он переписывает современный JavaScript-код в предыдущий стандарт.) и добавить полифил. Т.е. полифил - это функция 
      реализующая новый код в старом стандарте

50) Как выполнить функцию с задержкой? Опишите принцип работы метода.


51) Как запускать выполнение функции через определенный промежуток времени? Опишите принцип работы метода.
52) В чем разница между setInterval() и рекурсивным setTimeout() ?
53) Как остановить работу интервала?

54) Каким языком является JavaScript? Что значат эти понятия?
55) Что такое однопоточность?
56) Что такое синхронность?
57) Что такое Event Loop и как он работает?
58) Что такое Queue? По какому принципу работает?
59) Что такое Stack? По какому принципу работает?
60) Что содержится в WebAPI?
61) Для чего используют setTimeout(func, 0) ?

62) Что такое регулярное выражение и из чего оно состоит?
63) Опишите два способа задать регулярное выражение.
64) В чем преимущество объявления регулярного выражения через объект класса RegExp?
65) Какие флаги есть у регулярного выражения и для чего они служат?
66) Какие методы для работы с регулярными выражениями вам известны?
67) Как работает метод str.match(reg) с флагом и без флага g?
68) Как работает метод str.replace(reg, str) ?